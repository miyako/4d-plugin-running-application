/* --------------------------------------------------------------------------------
 #
 #  4DPlugin-Running-Application.cpp
 #	source generated by 4D Plugin Wizard
 #	Project : Running Application
 #	author : miyako
 #	2020/09/03
 #  
 # --------------------------------------------------------------------------------*/

#include "4DPlugin-Running-Application.h"

#pragma mark -

NSRunningApplication *_getApp(C_TEXT& appBundleIdentifier)
{
    NSRunningApplication *app = nil;
    NSString *bundleIdentifier = appBundleIdentifier.copyUTF16String();
    if([bundleIdentifier isEqualToString:APP_CURRENT_APPLICATION]){
        app = [NSRunningApplication currentApplication];
    }else{
        NSArray *runningApplications = [NSRunningApplication runningApplicationsWithBundleIdentifier:bundleIdentifier];
        if([runningApplications count])
            app = [runningApplications objectAtIndex:0];
    }
    [bundleIdentifier release];
    return app;
}

#pragma mark -

void PluginMain(PA_long32 selector, PA_PluginParameters params) {
    
	try
	{
        switch(selector)
        {
			// --- Running Application
            
			case 1 :
				App_LIST(params);
				break;
			case 2 :
				App_TERMINATE(params);
				break;
			case 3 :
				App_FORCE_TERMINATE(params);
				break;
			case 4 :
				App_Is_active(params);
				break;
			case 5 :
				App_ACTIVATE(params);
				break;
			case 6 :
				App_Get_icon(params);
				break;
			case 7 :
				App_HIDE(params);
				break;
			case 8 :
				App_SHOW(params);
				break;
			case 9 :
				App_Is_hidden(params);
				break;
			case 10 :
				App_Get_path(params);
				break;
			case 11 :
				App_Get_localized_name(params);
				break;
			case 12 :
				App_Find_path(params);
				break;

        }

	}
	catch(...)
	{

	}
}

#pragma mark -

void App_LIST(PA_PluginParameters params) {

//    sLONG_PTR *pResult = (sLONG_PTR *)params->fResult;
    PackagePtr pParams = (PackagePtr)params->fParameters;
    
    ARRAY_TEXT Param1;
    ARRAY_TEXT Param2;
    ARRAY_LONGINT Param3;

    NSArray *runningApplications = [[NSWorkspace sharedWorkspace]runningApplications];

    Param1.setSize(1);
    Param2.setSize(1);
    Param3.setSize(1);
    
    for(unsigned int i = 0 ; i < [runningApplications count] ; ++i){
        
        Param1.appendUTF16String([[runningApplications objectAtIndex:i]localizedName]);
        Param2.appendUTF16String([[runningApplications objectAtIndex:i]bundleIdentifier]);
        Param3.appendIntValue([[runningApplications objectAtIndex:i]processIdentifier]);
    }
    
    Param1.toParamAtIndex(pParams, 1);
    Param2.toParamAtIndex(pParams, 2);
    Param3.toParamAtIndex(pParams, 3);
}

void App_TERMINATE(PA_PluginParameters params) {
    
    //    sLONG_PTR *pResult = (sLONG_PTR *)params->fResult;
    PackagePtr pParams = (PackagePtr)params->fParameters;
    
    C_TEXT Param1;

    Param1.fromParamAtIndex(pParams, 1);

    NSRunningApplication *app = _getApp(Param1);
    
    if(app)
        [app terminate];
}

void App_FORCE_TERMINATE(PA_PluginParameters params) {

    //    sLONG_PTR *pResult = (sLONG_PTR *)params->fResult;
    PackagePtr pParams = (PackagePtr)params->fParameters;
    
    C_TEXT Param1;

    Param1.fromParamAtIndex(pParams, 1);

    NSRunningApplication *app = _getApp(Param1);
    
    if(app)
        [app forceTerminate];
}

void App_Is_active(PA_PluginParameters params) {

    sLONG_PTR *pResult = (sLONG_PTR *)params->fResult;
    PackagePtr pParams = (PackagePtr)params->fParameters;
    
    C_TEXT Param1;
    C_LONGINT returnValue;

    Param1.fromParamAtIndex(pParams, 1);

    NSRunningApplication *app = _getApp(Param1);
    
    if(app)
        returnValue.setIntValue([app isActive]);
            
    returnValue.setReturn(pResult);
}

void App_ACTIVATE(PA_PluginParameters params) {
    
    //    sLONG_PTR *pResult = (sLONG_PTR *)params->fResult;
    PackagePtr pParams = (PackagePtr)params->fParameters;
    
    C_TEXT Param1;

    Param1.fromParamAtIndex(pParams, 1);

    NSRunningApplication *app = _getApp(Param1);
    
    if(app)
        [app activateWithOptions:NSApplicationActivateIgnoringOtherApps];
}

void App_Get_icon(PA_PluginParameters params) {

    sLONG_PTR *pResult = (sLONG_PTR *)params->fResult;
    PackagePtr pParams = (PackagePtr)params->fParameters;
    
    C_TEXT Param1;

    Param1.fromParamAtIndex(pParams, 1);

    NSRunningApplication *app = _getApp(Param1);
    
    if(app){
        NSImage *icon = [app icon];
        if(icon){
            NSRect imageRect = NSMakeRect(0, 0, DEFAULT_ICON_SIZE, DEFAULT_ICON_SIZE);
            CGImageRef image = [icon CGImageForProposedRect:(NSRect *)&imageRect context:NULL hints:NULL];
            CFMutableDataRef data = CFDataCreateMutable(kCFAllocatorDefault, 0);
            CGImageDestinationRef destination = CGImageDestinationCreateWithData(data, kUTTypeTIFF, 1, NULL);
            CFMutableDictionaryRef properties = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, NULL, NULL);
            CGImageDestinationAddImage(destination, image, properties);
            CGImageDestinationFinalize(destination);
            PA_Picture picture = PA_CreatePicture((void *)CFDataGetBytePtr(data), (PA_long32)CFDataGetLength(data));
            *(PA_Picture*) pResult = picture;
            CFRelease(destination);
            CFRelease(properties);
            CFRelease(data);
        }
    }
}

void App_HIDE(PA_PluginParameters params) {

//    sLONG_PTR *pResult = (sLONG_PTR *)params->fResult;
    PackagePtr pParams = (PackagePtr)params->fParameters;
    
    C_TEXT Param1;
    
    Param1.fromParamAtIndex(pParams, 1);
    
    NSRunningApplication *app = _getApp(Param1);
    
    if(app)
        [app hide];
}

void App_SHOW(PA_PluginParameters params) {

//    sLONG_PTR *pResult = (sLONG_PTR *)params->fResult;
    PackagePtr pParams = (PackagePtr)params->fParameters;
   
    C_TEXT Param1;
    
    Param1.fromParamAtIndex(pParams, 1);
    
    NSRunningApplication *app = _getApp(Param1);
    
    if(app)
        [app unhide];
}

void App_Is_hidden(PA_PluginParameters params) {

    sLONG_PTR *pResult = (sLONG_PTR *)params->fResult;
    PackagePtr pParams = (PackagePtr)params->fParameters;
    
    C_TEXT Param1;
    C_LONGINT returnValue;
    
    Param1.fromParamAtIndex(pParams, 1);
    
    NSRunningApplication *app = _getApp(Param1);
    
    if(app)
        returnValue.setIntValue([app isHidden]);
    
    returnValue.setReturn(pResult);
}

void App_Get_path(PA_PluginParameters params) {

    sLONG_PTR *pResult = (sLONG_PTR *)params->fResult;
    PackagePtr pParams = (PackagePtr)params->fParameters;
    
    C_TEXT Param1;
    C_TEXT returnValue;

    Param1.fromParamAtIndex(pParams, 1);

    NSRunningApplication *app = _getApp(Param1);
    
    if(app){
        NSURL *url = [app bundleURL];
        if(!url)
            url = [app executableURL];
        
        if(url){
            NSString *path = (NSString *)CFURLCopyFileSystemPath((CFURLRef)url, kCFURLHFSPathStyle);
            if(path){
                returnValue.setUTF16String(path);
                [path release];
            }
        }
    }
    
    returnValue.setReturn(pResult);
}

void App_Get_localized_name(PA_PluginParameters params) {

    sLONG_PTR *pResult = (sLONG_PTR *)params->fResult;
    PackagePtr pParams = (PackagePtr)params->fParameters;
    
    C_TEXT Param1;
    C_TEXT returnValue;

    Param1.fromParamAtIndex(pParams, 1);

    NSRunningApplication *app = _getApp(Param1);
    
    if(app){
        returnValue.setUTF16String([app localizedName]);
    }

    returnValue.setReturn(pResult);
}

void App_Find_path(PA_PluginParameters params) {

    sLONG_PTR *pResult = (sLONG_PTR *)params->fResult;
    PackagePtr pParams = (PackagePtr)params->fParameters;
    
    C_TEXT Param1;
    C_TEXT returnValue;

    Param1.fromParamAtIndex(pParams, 1);

    NSString *bundleIdentifier = Param1.copyUTF16String();
    NSBundle *b = [NSBundle bundleWithIdentifier:bundleIdentifier];
    if(b){
        NSURL *url = [b bundleURL];
        if(url){
            NSString *path = (NSString *)CFURLCopyFileSystemPath((CFURLRef)url, kCFURLHFSPathStyle);
            if(path){
                returnValue.setUTF16String(path);
                [path release];
            }
        }
    }
    
    [bundleIdentifier release];

    returnValue.setReturn(pResult);
}

